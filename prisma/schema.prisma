// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["url_manager", "auth"]
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String?   // Optional for social auth
  name           String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  emailVerified  DateTime? @map("email_verified")
  verifyToken    String?   @unique @map("verify_token")
  resetToken     String?   @unique @map("reset_token")
  resetTokenExp  DateTime? @map("reset_token_exp")
  githubId       String?   @unique @map("github_id")
  lists          List[]

  @@schema("auth")
}

model List {
  id              Int        @id @default(autoincrement())
  userId          String     // Changed to String to match User.id
  customUrl       String?    @unique @map("custom_url")
  autoGeneratedUrl String    @unique @map("auto_generated_url")
  title           String?
  description     String?
  isPublished     Boolean    @default(false) @map("is_published")
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           ListItem[]

  @@map("lists")
  @@schema("url_manager")
}

model ListItem {
  id          Int      @id @default(autoincrement())
  listId      Int      @map("list_id")
  url         String
  title       String?
  description String?
  position    Int
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("list_items")
  @@schema("url_manager")
}

model SystemNotification {
  id        String   @id @default(cuid())
  type      String   // 'success', 'error', 'warning'
  title     String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("system_notifications")
  @@schema("auth")
}
