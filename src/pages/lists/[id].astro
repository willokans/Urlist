---
import Layout from '../../layouts/Layout.astro';
import AddUrlForm from '../../components/AddUrlForm.astro';
import UrlItem from '../../components/UrlItem.astro';
import prisma from '../../lib/prisma';
import { authenticateUser } from '../../lib/middleware';
import { isValidUrl, extractUrlMetadata } from '../../utils/url';

const { id } = Astro.params;
const user = await authenticateUser(Astro);

// Find the list by custom URL or auto-generated URL
const list = await prisma.list.findFirst({
  where: {
    OR: [
      { customUrl: id },
      { autoGeneratedUrl: id }
    ]
  },
  include: {
    items: {
      orderBy: {
        position: 'asc'
      }
    }
  }
});

if (!list) {
  return Astro.redirect('/404');
}

// Check if user has permission to edit
const canEdit = user?.id === list.userId;

// If list is not published and user can't edit, redirect to 404
if (!list.isPublished && !canEdit) {
  return Astro.redirect('/404');
}

// Handle POST requests (adding/updating URLs)
if (Astro.request.method === 'POST') {
  // Only allow edits if user has permission
  if (!canEdit) {
    return new Response(null, { status: 403 });
  }

  const formData = await Astro.request.formData();
  const action = formData.get('action')?.toString();
  const url = formData.get('url')?.toString();

  if (action === 'add' && url && isValidUrl(url)) {
    const metadata = await extractUrlMetadata(url);
    const maxPosition = Math.max(0, ...list.items.map(item => item.position));
    
    await prisma.listItem.create({
      data: {
        listId: list.id,
        url,
        title: metadata.title,
        description: metadata.description,
        position: maxPosition + 1
      }
    });
  }
  
  // Redirect to the same page to prevent form resubmission
  return Astro.redirect(`/lists/${id}`);
}

// Handle URL deletion
if (Astro.request.method === 'DELETE') {
  // Only allow edits if user has permission
  if (!canEdit) {
    return new Response(null, { status: 403 });
  }

  const formData = await Astro.request.formData();
  const itemId = formData.get('itemId')?.toString();
  
  if (itemId) {
    await prisma.listItem.delete({
      where: { id: parseInt(itemId) }
    });
  }
  
  return new Response(null, { status: 204 });
}
---

<Layout title={list.title || 'Untitled List'}>
  <div class="max-w-4xl mx-auto">
    <div class="mb-8">
      <div class="sm:flex sm:items-center sm:justify-between">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">
            {list.title || 'Untitled List'}
          </h1>
          {list.description && (
            <p class="mt-2 text-sm text-gray-500">
              {list.description}
            </p>
          )}
        </div>
        {canEdit && (
          <div class="mt-4 sm:mt-0">
            <span class="isolate inline-flex rounded-md shadow-sm">
              <button
                type="button"
                class="relative inline-flex items-center rounded-l-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10"
                onclick="navigator.clipboard.writeText(window.location.href); alert('Link copied!')"
              >
                Copy Link
              </button>
              <button
                type="button"
                class="relative -ml-px inline-flex items-center rounded-r-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10"
                onclick={`window.location.href='${list.isPublished ? '#' : '/publish/' + id}'`}
              >
                {list.isPublished ? 'Published' : 'Publish'}
              </button>
            </span>
          </div>
        )}
      </div>
    </div>

    <div class="bg-white shadow rounded-lg divide-y divide-gray-200">
      {canEdit && (
        <div class="p-6">
          <AddUrlForm />
        </div>
      )}

      <div class="divide-y divide-gray-200">
        {list.items.map((item) => (
          <UrlItem
            url={item.url}
            title={item.title}
            description={item.description}
            position={item.position}
            canEdit={canEdit}
          />
        ))}
      </div>
    </div>
  </div>
</Layout>

<script>
  // Handle URL operations
  window.addEventListener('addUrl', async (e) => {
    const { url } = (e as CustomEvent).detail;
    const formData = new FormData();
    formData.append('action', 'add');
    formData.append('url', url);
    await fetch(window.location.href, {
      method: 'POST',
      body: formData
    });
    window.location.reload();
  });

  window.addEventListener('deleteUrl', async (e) => {
    const { position } = (e as CustomEvent).detail;
    if (confirm('Are you sure you want to delete this URL?')) {
      const formData = new FormData();
      formData.append('position', position.toString());
      await fetch(window.location.href, {
        method: 'DELETE',
        body: formData
      });
      window.location.reload();
    }
  });
</script>
