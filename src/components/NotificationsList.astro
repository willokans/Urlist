---
interface Props {
  notifications: Array<{
    id: string;
    type: string;
    title: string;
    message: string;
    metadata: any;
    read: boolean;
    createdAt: Date;
  }>;
}

const { notifications } = Astro.props;

function formatDate(date: Date) {
  return new Intl.DateTimeFormat('en-US', {
    dateStyle: 'medium',
    timeStyle: 'short'
  }).format(new Date(date));
}
---

<div class="bg-white shadow-lg shadow-gray-100/50 overflow-hidden sm:rounded-lg border border-gray-100">
  <ul role="list" class="divide-y divide-gray-100">
    {notifications.map((notification) => (
      <li class={`p-4 hover:bg-gray-50/80 transition-colors duration-200 ${notification.read ? 'bg-gray-50/50' : 'bg-white'}`}>
        <div class="flex items-start">
          <div class="flex-shrink-0 mt-1">
            {notification.type === 'success' && (
              <span class="h-6 w-6 text-green-600 transition-transform duration-200 hover:scale-110">
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </span>
            )}
            {notification.type === 'error' && (
              <span class="h-6 w-6 text-red-600 transition-transform duration-200 hover:scale-110">
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </span>
            )}
            {notification.type === 'warning' && (
              <span class="h-6 w-6 text-yellow-600 transition-transform duration-200 hover:scale-110">
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
              </span>
            )}
          </div>
          <div class="ml-3 flex-1">
            <div class="flex justify-between items-start">
              <p class="text-sm font-medium text-gray-900 group-hover:text-gray-700">{notification.title}</p>
              <div class="flex items-center space-x-4">
                {!notification.read && (
                  <form method="POST" action={`/notifications/${notification.id}/read`}>
                    <button
                      type="submit"
                      class="inline-flex items-center text-xs text-purple-600 hover:text-purple-700 transition-colors duration-200"
                    >
                      <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                      </svg>
                      Mark as read
                    </button>
                  </form>
                )}
                <p class="text-sm text-gray-500">{formatDate(notification.createdAt)}</p>
              </div>
            </div>
            <p class="mt-1 text-sm text-gray-600">{notification.message}</p>
            {Object.keys(notification.metadata || {}).length > 0 && (
              <div class="mt-2 text-sm text-gray-500 bg-gray-50/70 rounded-md p-3">
                <dl class="grid grid-cols-1 gap-x-4 gap-y-2 sm:grid-cols-2">
                  {Object.entries(notification.metadata).map(([key, value]) => (
                    <>
                      <dt class="font-medium text-gray-600">{key}:</dt>
                      <dd class="text-gray-700">{String(value)}</dd>
                    </>
                  ))}
                </dl>
              </div>
            )}
          </div>
        </div>
      </li>
    ))}
  </ul>
</div>
